// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE 

#include <endian.h>
#include <fcntl.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

static long syz_open_dev(volatile long a0, volatile long a1, volatile long a2)
{
	if (a0 == 0xc || a0 == 0xb) {
		char buf[128];
		sprintf(buf, "/dev/%s/%d:%d", a0 == 0xc ? "char" : "block", (uint8_t)a1, (uint8_t)a2);
		return open(buf, O_RDWR, 0);
	} else {
		char buf[1024];
		char* hash;
		strncpy(buf, (char*)a0, sizeof(buf) - 1);
		buf[sizeof(buf) - 1] = 0;
		while ((hash = strchr(buf, '#'))) {
			*hash = '0' + (char)(a1 % 10);
			a1 /= 10;
		}
		return open(buf, a2, 0);
	}
}

uint64_t r[1] = {0xffffffffffffffff};

int main(void)
{
		syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
	syscall(__NR_mmap, 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
	syscall(__NR_mmap, 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
				intptr_t res = 0;
	res = -1;
res = syz_open_dev(0xc, 4, 1);
	if (res != -1)
		r[0] = res;
*(uint32_t*)0x20000a40 = 0;
*(uint32_t*)0x20000a44 = 0;
*(uint32_t*)0x20000a48 = 0x24;
*(uint32_t*)0x20000a4c = 0x10;
*(uint32_t*)0x20000a50 = 0x200;
*(uint64_t*)0x20000a58 = 0x20000600;
memcpy((void*)0x20000600, "\x70\x59\x21\x1b\x7a\x5b\x58\x58\xe5\x1f\x1e\xf4\xcd\x7a\x0a\xcb\xdc\x3c\xbc\x05\x2c\x8f\x54\xf1\xb9\x01\x4e\x2b\x48\x25\x9b\xc3\x1a\xd7\x95\x31\x0c\xdc\x39\x5e\x98\x7e\xbc\x2a\x56\xd6\x52\xaf\xf6\x88\xbc\x25\x02\xc8\x7f\x5f\x63\xf2\xdc\x32\x91\xdb\x10\x7e\xcd\x54\x2c\xf8\x74\x3d\x34\x61\xa3\x17\x5b\xba\xa1\x5d\x5d\x3e\x79\xc3\x20\xdf\x9d\x1e\x01\x17\x73\x85\x64\x5a\x75\x0f\xc7\x3e\x17\x90\xb5\x70\x5d\x9c\xb1\xc0\xe8\xaf\x7c\x7f\xe7\xe3\x5c\xac\x1e\xb6\x43\x2d\xfc\xe0\x3b\x5b\xf9\xbf\x75\xba\x0c\x9c\xfa\x92\x6b\x65\xc2\x86\xc5\xe1\x38\x6b\x16\xdb\x0d\x43\x2e\xcf\xf0\x28\xdd\x54\x30\x23\xc4\xfb\xbb\x0c\x48\x2b\xcf\xc6\x77\xff\xe2\xb2\x4c\xf5\x27\x57\xff\x73\xfb\xf8\x8f\x81\x60\x51\x1f\x2a\xa0\x8b\xe7\x1f\x81\xe8\xac\x82\xf3\xf1\x7d\x68\x08\xa9\x23\xe6\x75\xa4\xa9\x62\x61\x13\xfa\x82\xf7\x7f\x3d\xba\x44\xf8\x03\x6c\x54\xe0\x76\xbc\x68\x72\xe4\xce\xd9\xb4\x71\xd2\xc3\x25\xae\x68\xff\xb9\xcb\xb3\xae\x29\x58\xf2\xbb\xcb\xee\xdd\x93\x3e\x88\x81\xfa\xbf\xf1\x5d\x78\x9a\x9a\x59\x8b\xdc\xff\x7e\xa5\xef\x7a\x00\x06\x2c\x34\xc4\xec\x07\x80\x73\x03\x04\x18\xef\x71\x72\xd8\xd3\xc3\xfc\x12\x29\x3d\xf8\xd8\x58\x12\x26\x77\x3c\x59\x78\x68\x0d\x72\x46\x30\xd5\x91\xe2\x5f\x6a\x3e\x57\x97\x1f\x3e\x6f\x7f\xae\x82\x1f\x97\x6c\x0e\x49\xc4\x7f\xa6\x4e\xe1\x6e\xd7\x31\x04\xc3\x1a\x55\xf2\xe6\xb8\x45\x76\x09\x4f\x9d\xd0\x81\xcb\x61\xe2\x4b\x04\x5f\x6b\x75\x04\x5d\x1b\x16\x33\x7f\x27\x3a\xa4\xab\x7c\x59\xad\x81\xa1\x0f\x04\x99\xee\x1e\x6a\x4e\xdf\x76\x22\x85\x90\x71\x23\x98\xec\xc7\x5b\xe3\x0a\x25\x2a\x5f\x5e\x2e\x91\x1a\x23\xad\xa8\xb8\x8b\x39\x6f\x87\x78\x81\xfa\xc4\x4a\xc3\x00\x47\xc2\x67\xe6\x0c\xbc\xfd\x54\x7b\x4d\xd1\x9f\x6e\x40\xe0\xc4\xbc\x01\x14\x5c\x7f\x81\xcf\xed\x3c\x14\x60\x8d\xb5\x37\x68\x99\x25\xaf\xd4\xb6\x2b\x7e\x10\x8b\x41\x69\xc3\xc9\x4d\x6e\xba\xc4\xd6\xce\xcf\x6e\x44\x46\x15\xd1\xb3\xe2\x4c\xab\x34\x41\x6e\x08\xd0\x49\xfa\x24\x41\x5b\x03\x4c\x32\x4a\x1a\x7c\x9c\x3b\x7a\x2f\x31\x20\x87\x02\x60\xa2\x68\xb0\x6d\x6c\x61\x49\x2d\x77\xb8\x03\x8a\x31\x38\x55\xf9\xa5\x6f\x63\xb8\x2f\x45\xd0\xb4\x55\x66\x03\xb9\x2b\x5f\x81\x68\x70\xc4\x08\xc8\x54\x03\x54\x64\xbe\xb7\xdc\x77\x94\x88\x4f\xf6\x3b\x4c\xd9\x3b\xff\xc8\x2a\x08\x04\x70\xdf\x32\x58\xad\xdf\xb8\xbd\x22\x56\xef\x52\xa8\x58\xaa\x0b\xfa\xaf\x9d\xe4\x03\x94\x06\xa9\xe4\x0f\x7a\xc9\xaf\x95\x45\x3b\xc7\xa6\x21\xd0\x22\x02\x05\x94\x3e\x65\xe3\x24\x8e\x25\x66\x32\x28\x0b\x8f\x97\xd1\x79\x5d\xda\xe7\x9d\x90\xb7\xae\x49\x3e\xac\xf0\x31\xa1\xd1\xb4\x9f\x74\xb8\x8c\x90\x7e\xb8\x74\x6e\x19\x9e\x45\x2f\x71\x26\x87\x25\x8a\xbd\x5d\x15\x31\x29\x42\x10\x24\x50\x2e\xa1\x6a\xaa\x2c\x34\x3d\x6f\x82\xf8\x67\xbf\x44\x84\xc2\xde\x1b\x59\xe7\xf1\x75\x5c\x9f\x41\x47\x5f\x71\x4f\xf8\xe0\x5d\xb7\x27\xf5\x91\x22\xd2\xe5\xb3\x60\xe9\xf6\xc9\xb8\x82\x33\x43\x85\x9c\x9b\x65\x19\x5f\x52\xd6\x43\xa1\xae\x8b\x5b\x16\x77\x00\x3b\x9b\xc3\x0e\x34\x77\x12\xcd\xbc\x34\x80\xe8\xdd\x1a\x83\xb2\xfd\xea\x3a\xac\xba\x2a\x7b\x8d\xfa\x89\x42\xce\x94\x1d\xa7\xa5\xf3\xb7\x29\x14\x6d\x44\x8d\x90\xa7\x1d\x8a\x11\x14\x82\x86\x93\x77\x48\xbd\x5d\x01\x11\xaf\xe0\xb5\xd3\x8c\x74\x69\x27\x6e\x91\x59\x46\x7f\x7a\x89\x14\xeb\xa1\xef\xcd\xc6\x62\x2c\x2b\x3d\x5f\x36\xb5\xb7\x22\xe3\xcc\xea\x69\x88\xf1\xac\xb5\x4b\x48\xf4\xd1\xcd\xc6\x60\x00\x5e\x09\x2d\xf9\x59\x9c\x5f\xd3\xbd\xf6\x48\x67\xc3\x48\x69\xe2\x9e\xad\x8d\x56\x75\x26\x95\x3a\xbe\x2c\x5d\xc9\x7d\xce\x20\x5e\x06\xe3\xbc\x5f\xb9\x57\x0d\x68\x6c\x85\x7b\x83\x23\xcf\x06\x2f\xa3\xcb\xe2\xf4\x62\x0d\xd9\xff\x3d\xaf\x6b\x25\xe4\xd8\x17\x86\x8f\x9e\xfe\xae\x22\xc7\xef\x1e\x04\xba\xb3\x62\x2d\x1e\x62\x09\x75\x95\xb1\xb1\x9d\xf5\x84\x68\xd6\xca\x9b\xe5\x56\xf8\xbe\x97\x7f\x98\xcd\x55\x5f\x4f\x40\x74\x9c\x68\x99\xa7\x43\x8f\x9e\x21\x19\x2d\x4b\xcb\xaa\x7d\xcb\xbd\xe7\x65\x93\x65\x31\xb5\x4d\x5d\xab\x0b\xcb\x4f\x85\xf9\x8c\xd6\x7b\x9f\x95\xb0\xdf\x82\x88\xd8\xdd\x26\x32\x50\x29\x64\x46\x11\xdf\xec\x01\x5a\x7d\x29\x47\x17\xbe\xc7\xe0\xf4\xe6\x48\x3b\x9d\xa9\xc6\x65\x57\x77\x5d\x20\x54\x7f\x57\x0f\xfe\x95\x17\x17\x8b\x0d\x07\x7a\xe1\xe1\x8e\x04\x5d\x59\x62\xe3\x07\xc6\x6a\x11\xbb\x4f\x8e\xe2\xf1\x68\xf3\xfe\xeb\x7c\x53\x50\x4a\x8d\xfb\x98\xd8\xe3\xb4\xf1\xc6\x73\x3b\x04\xbe\x71\x5e\x91\x30", 1024);
	syscall(__NR_ioctl, r[0], 0x4b72, 0x20000a40ul);
	return 0;
}
