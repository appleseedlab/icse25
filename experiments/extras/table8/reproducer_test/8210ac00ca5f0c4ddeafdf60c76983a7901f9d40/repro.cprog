// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE 

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <sched.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#include <linux/capability.h>
#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static bool write_file(const char* file, const char* what, ...)
{
	char buf[1024];
	va_list args;
	va_start(args, what);
	vsnprintf(buf, sizeof(buf), what, args);
	va_end(args);
	buf[sizeof(buf) - 1] = 0;
	int len = strlen(buf);
	int fd = open(file, O_WRONLY | O_CLOEXEC);
	if (fd == -1)
		return false;
	if (write(fd, buf, len) != len) {
		int err = errno;
		close(fd);
		errno = err;
		return false;
	}
	close(fd);
	return true;
}

struct fs_image_segment {
	void* data;
	uintptr_t size;
	uintptr_t offset;
};
static int setup_loop_device(long unsigned size, long unsigned nsegs, struct fs_image_segment* segs, const char* loopname, int* memfd_p, int* loopfd_p)
{
	int err = 0, loopfd = -1;
	int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
	if (memfd == -1) {
		err = errno;
		goto error;
	}
	if (ftruncate(memfd, size)) {
		err = errno;
		goto error_close_memfd;
	}
	for (size_t i = 0; i < nsegs; i++) {
		if (pwrite(memfd, segs[i].data, segs[i].size, segs[i].offset) < 0) {
		}
	}
	loopfd = open(loopname, O_RDWR);
	if (loopfd == -1) {
		err = errno;
		goto error_close_memfd;
	}
	if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
		if (errno != EBUSY) {
			err = errno;
			goto error_close_loop;
		}
		ioctl(loopfd, LOOP_CLR_FD, 0);
		usleep(1000);
		if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
			err = errno;
			goto error_close_loop;
		}
	}
	*memfd_p = memfd;
	*loopfd_p = loopfd;
	return 0;

error_close_loop:
	close(loopfd);
error_close_memfd:
	close(memfd);
error:
	errno = err;
	return -1;
}

static long syz_mount_image(volatile long fsarg, volatile long dir, volatile unsigned long size, volatile unsigned long nsegs, volatile long segments, volatile long flags, volatile long optsarg, volatile long change_dir)
{
	struct fs_image_segment* segs = (struct fs_image_segment*)segments;
	int res = -1, err = 0, loopfd = -1, memfd = -1, need_loop_device = !!segs;
	char* mount_opts = (char*)optsarg;
	char* target = (char*)dir;
	char* fs = (char*)fsarg;
	char* source = NULL;
	char loopname[64];
	if (need_loop_device) {
		memset(loopname, 0, sizeof(loopname));
		snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
		if (setup_loop_device(size, nsegs, segs, loopname, &memfd, &loopfd) == -1)
			return -1;
		source = loopname;
	}
	mkdir(target, 0777);
	char opts[256];
	memset(opts, 0, sizeof(opts));
	if (strlen(mount_opts) > (sizeof(opts) - 32)) {
	}
	strncpy(opts, mount_opts, sizeof(opts) - 32);
	if (strcmp(fs, "iso9660") == 0) {
		flags |= MS_RDONLY;
	} else if (strncmp(fs, "ext", 3) == 0) {
		if (strstr(opts, "errors=panic") || strstr(opts, "errors=remount-ro") == 0)
			strcat(opts, ",errors=continue");
	} else if (strcmp(fs, "xfs") == 0) {
		strcat(opts, ",nouuid");
	}
	res = mount(source, target, fs, flags, opts);
	if (res == -1) {
		err = errno;
		goto error_clear_loop;
	}
	res = open(target, O_RDONLY | O_DIRECTORY);
	if (res == -1) {
		err = errno;
		goto error_clear_loop;
	}
	if (change_dir) {
		res = chdir(target);
		if (res == -1) {
			err = errno;
		}
	}

error_clear_loop:
	if (need_loop_device) {
		ioctl(loopfd, LOOP_CLR_FD, 0);
		close(loopfd);
		close(memfd);
	}
	errno = err;
	return res;
}

static void setup_common()
{
	if (mount(0, "/sys/fs/fuse/connections", "fusectl", 0, 0)) {
	}
}

static void setup_binderfs()
{
	if (mkdir("/dev/binderfs", 0777)) {
	}
	if (mount("binder", "/dev/binderfs", "binder", 0, NULL)) {
	}
	if (symlink("/dev/binderfs", "./binderfs")) {
	}
}

static void loop();

static void sandbox_common()
{
	prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
	setsid();
	struct rlimit rlim;
	rlim.rlim_cur = rlim.rlim_max = (200 << 20);
	setrlimit(RLIMIT_AS, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 32 << 20;
	setrlimit(RLIMIT_MEMLOCK, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 136 << 20;
	setrlimit(RLIMIT_FSIZE, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 1 << 20;
	setrlimit(RLIMIT_STACK, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 128 << 20;
	setrlimit(RLIMIT_CORE, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 256;
	setrlimit(RLIMIT_NOFILE, &rlim);
	if (unshare(CLONE_NEWNS)) {
	}
	if (mount(NULL, "/", NULL, MS_REC | MS_PRIVATE, NULL)) {
	}
	if (unshare(CLONE_NEWIPC)) {
	}
	if (unshare(0x02000000)) {
	}
	if (unshare(CLONE_NEWUTS)) {
	}
	if (unshare(CLONE_SYSVSEM)) {
	}
	typedef struct {
		const char* name;
		const char* value;
	} sysctl_t;
	static const sysctl_t sysctls[] = {
	    {"/proc/sys/kernel/shmmax", "16777216"},
	    {"/proc/sys/kernel/shmall", "536870912"},
	    {"/proc/sys/kernel/shmmni", "1024"},
	    {"/proc/sys/kernel/msgmax", "8192"},
	    {"/proc/sys/kernel/msgmni", "1024"},
	    {"/proc/sys/kernel/msgmnb", "1024"},
	    {"/proc/sys/kernel/sem", "1024 1048576 500 1024"},
	};
	unsigned i;
	for (i = 0; i < sizeof(sysctls) / sizeof(sysctls[0]); i++)
		write_file(sysctls[i].name, sysctls[i].value);
}

static int wait_for_loop(int pid)
{
	if (pid < 0)
	exit(1);
	int status = 0;
	while (waitpid(-1, &status, __WALL) != pid) {
	}
	return WEXITSTATUS(status);
}

static void drop_caps(void)
{
	struct __user_cap_header_struct cap_hdr = {};
	struct __user_cap_data_struct cap_data[2] = {};
	cap_hdr.version = _LINUX_CAPABILITY_VERSION_3;
	cap_hdr.pid = getpid();
	if (syscall(SYS_capget, &cap_hdr, &cap_data))
	exit(1);
	const int drop = (1 << CAP_SYS_PTRACE) | (1 << CAP_SYS_NICE);
	cap_data[0].effective &= ~drop;
	cap_data[0].permitted &= ~drop;
	cap_data[0].inheritable &= ~drop;
	if (syscall(SYS_capset, &cap_hdr, &cap_data))
	exit(1);
}

static int do_sandbox_none(void)
{
	if (unshare(CLONE_NEWPID)) {
	}
	int pid = fork();
	if (pid != 0)
		return wait_for_loop(pid);
	setup_common();
	sandbox_common();
	drop_caps();
	if (unshare(CLONE_NEWNET)) {
	}
	write_file("/proc/sys/net/ipv4/ping_group_range", "0 65535");
	setup_binderfs();
	loop();
	exit(1);
}

#define USLEEP_FORKED_CHILD (3 * 50 *1000)

static long handle_clone_ret(long ret)
{
	if (ret != 0) {
		return ret;
	}
	usleep(USLEEP_FORKED_CHILD);
	syscall(__NR_exit, 0);
	while (1) {
	}
}

static long syz_clone(volatile long flags, volatile long stack, volatile long stack_len,
		      volatile long ptid, volatile long ctid, volatile long tls)
{
	long sp = (stack + stack_len) & ~15;
	long ret = (long)syscall(__NR_clone, flags & ~CLONE_VM, sp, ptid, ctid, tls);
	return handle_clone_ret(ret);
}

void loop(void)
{
memcpy((void*)0x20000000, "udf\000", 4);
memcpy((void*)0x20000100, "./file0\000", 8);
*(uint64_t*)0x20000200 = 0x20010000;
memcpy((void*)0x20010000, "\x00\x42\x45\x41\x30\x31\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32);
*(uint64_t*)0x20000208 = 0x20;
*(uint64_t*)0x20000210 = 0x8000;
*(uint64_t*)0x20000218 = 0x20010020;
memcpy((void*)0x20010020, "\x00\x4e\x53\x52\x30\x32\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32);
*(uint64_t*)0x20000220 = 0x20;
*(uint64_t*)0x20000228 = 0x8800;
*(uint64_t*)0x20000230 = 0x20010040;
memcpy((void*)0x20010040, "\x00\x54\x45\x41\x30\x31\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32);
*(uint64_t*)0x20000238 = 0x20;
*(uint64_t*)0x20000240 = 0x9000;
*(uint64_t*)0x20000248 = 0x20010060;
memcpy((void*)0x20010060, "\x01\x00\x02\x00\x22\x00\x01\x00\x42\xc4\xf0\x01\x27\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x08\x4c\x69\x6e\x75\x78\x55\x44\x46\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x01\x00\x01\x00\x02\x00\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x08\x31\x32\x33\x34\x35\x36\x37\x38\x31\x32\x33\x34\x35\x36\x37\x38\x4c\x69\x6e\x75\x78\x55\x44\x46\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 128);
*(uint64_t*)0x20000250 = 0x80;
*(uint64_t*)0x20000258 = 0x9c00;
*(uint64_t*)0x20000260 = 0x200100e0;
memcpy((void*)0x200100e0, "\x00\x00\x00\x00\x00\x00\x00\x19\x00\x4f\x53\x54\x41\x20\x43\x6f\x6d\x70\x72\x65\x73\x73\x65\x64\x20\x55\x6e\x69\x63\x6f\x64\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x53\x54\x41\x20\x43\x6f\x6d\x70\x72\x65\x73\x73\x65\x64\x20\x55\x6e\x69\x63\x6f\x64\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x6d\x6b\x75\x64\x66\x66\x73\x20\x32\x2e\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x36\x52\x59\x3d\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00", 224);
*(uint64_t*)0x20000268 = 0xe0;
*(uint64_t*)0x20000270 = 0x9cc0;
*(uint64_t*)0x20000278 = 0x200101c0;
memcpy((void*)0x200101c0, "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32);
*(uint64_t*)0x20000280 = 0x20;
*(uint64_t*)0x20000288 = 0x9de0;
*(uint64_t*)0x20000290 = 0x200101e0;
memcpy((void*)0x200101e0, "\x06\x00\x02\x00\xb2\x00\x01\x00\x98\x3a\xae\x01\x28\x00\x00\x00\x02\x00\x00\x00\x00\x4f\x53\x54\x41\x20\x43\x6f\x6d\x70\x72\x65\x73\x73\x65\x64\x20\x55\x6e\x69\x63\x6f\x64\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x4c\x69\x6e\x75\x78\x55\x44\x46\x00\x00\x00", 96);
*(uint64_t*)0x20000298 = 0x60;
*(uint64_t*)0x200002a0 = 0xa000;
*(uint64_t*)0x200002a8 = 0x20010240;
memcpy((void*)0x20010240, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x00\x04\x00\x00\x00\x2a\x4f\x53\x54\x41\x20\x55\x44\x46\x20\x43\x6f\x6d\x70\x6c\x69\x61\x6e\x74\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 128);
*(uint64_t*)0x200002b0 = 0x80;
*(uint64_t*)0x200002b8 = 0xa0c0;
*(uint64_t*)0x200002c0 = 0x200102c0;
memcpy((void*)0x200102c0, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x2d\x00\x00\x00\x01\x06\x01\x00\x00\x00\x00\x00", 32);
*(uint64_t*)0x200002c8 = 0x20;
*(uint64_t*)0x200002d0 = 0xa1a0;
*(uint64_t*)0x200002d8 = 0x200102e0;
memcpy((void*)0x200102e0, "\x05\x00\x02\x00\x41\x00\x01\x00\x1f\x00\xf0\x01\x29\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x2b\x4e\x53\x52\x30\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 96);
*(uint64_t*)0x200002e0 = 0x60;
*(uint64_t*)0x200002e8 = 0xa400;
*(uint64_t*)0x200002f0 = 0x20010340;
memcpy((void*)0x20010340, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x37\x00\x00\x00\x48\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00", 64);
*(uint64_t*)0x200002f8 = 0x40;
*(uint64_t*)0x20000300 = 0xa4a0;
*(uint64_t*)0x20000308 = 0x20010380;
memcpy((void*)0x20010380, "\x07\x00\x02\x00\xb8\x00\x01\x00\x6d\x0f\x08\x00\x2a\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32);
*(uint64_t*)0x20000310 = 0x20;
*(uint64_t*)0x20000318 = 0xa800;
*(uint64_t*)0x20000320 = 0x200103a0;
memcpy((void*)0x200103a0, "\x04\x00\x02\x00\x88\x00\x01\x00\x27\x3e\xf0\x01\x2b\x00\x00\x00\x05\x00\x00\x00\x00\x2a\x55\x44\x46\x20\x4c\x56\x20\x49\x6e\x66\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x04\x05\x00\x00\x00\x00\x00\x4f\x53\x54\x41\x20\x43\x6f\x6d\x70\x72\x65\x73\x73\x65\x64\x20\x55\x6e\x69\x63\x6f\x64\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x4c\x69\x6e\x75\x78\x55\x44\x46\x00\x00\x00", 128);
*(uint64_t*)0x20000328 = 0x80;
*(uint64_t*)0x20000330 = 0xac00;
*(uint64_t*)0x20000338 = 0x20010420;
memcpy((void*)0x20010420, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000", 32);
*(uint64_t*)0x20000340 = 0x20;
*(uint64_t*)0x20000348 = 0xace0;
*(uint64_t*)0x20000350 = 0x20010440;
memcpy((void*)0x20010440, "\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00", 32);
*(uint64_t*)0x20000358 = 0x20;
*(uint64_t*)0x20000360 = 0xad60;
*(uint64_t*)0x20000368 = 0x20010460;
memcpy((void*)0x20010460, "\x08\x00\x02\x00\x28\x00\x01\x00\x00\x00\xf0\x01\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32);
*(uint64_t*)0x20000370 = 0x20;
*(uint64_t*)0x20000378 = 0xb000;
*(uint64_t*)0x20000380 = 0x20010480;
memcpy((void*)0x20010480, "\x09\x00\x02\x00\x5c\x00\x01\x00\x66\x47\x76\x00\x2d\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x39\x1a\x1c\x52\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x2e\x00\x00\x00\x32\x00\x00\x00\x48\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 160);
*(uint64_t*)0x20000388 = 0xa0;
*(uint64_t*)0x20000390 = 0xb400;
*(uint64_t*)0x20000398 = 0x20010520;
memcpy((void*)0x20010520, "\x08\x01\x02\x00\xac\x00\x01\x00\x7d\x1b\x08\x00\x00\x00\x00\x00\x48\x00\x00\x00\x09\x00\x00\x00\x00\x00\xc0\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 64);
*(uint64_t*)0x200003a0 = 0x40;
*(uint64_t*)0x200003a8 = 0xdc00;
*(uint64_t*)0x200003b0 = 0x20010560;
memcpy((void*)0x20010560, "\x00\x01\x02\x00\xe0\x00\x01\x00\xd5\x15\xf0\x01\x01\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x36\x52\x59\x3d\x03\x00\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x53\x54\x41\x20\x43\x6f\x6d\x70\x72\x65\x73\x73\x65\x64\x20\x55\x6e\x69\x63\x6f\x64\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x4c\x69\x6e\x75\x78\x55\x44\x46\x00\x00\x00\x00\x00\x00\x00", 128);
*(uint64_t*)0x200003b8 = 0x80;
*(uint64_t*)0x200003c0 = 0xe000;
*(uint64_t*)0x200003c8 = 0x200105e0;
memcpy((void*)0x200105e0, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x00\x4f\x53\x54\x41\x20\x43\x6f\x6d\x70\x72\x65\x73\x73\x65\x64\x20\x55\x6e\x69\x63\x6f\x64\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x4c\x69\x6e\x75\x78\x55\x44\x46\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x08\x43\x6f\x70\x79\x72\x69\x67\x68\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x08\x41\x62\x73\x74\x72\x61\x63\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x00\x08\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4f\x53\x54\x41\x20\x55\x44\x46\x20\x43\x6f\x6d\x70\x6c\x69\x61\x6e\x74\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00", 224);
*(uint64_t*)0x200003d0 = 0xe0;
*(uint64_t*)0x200003d8 = 0xe0e0;
*(uint64_t*)0x200003e0 = 0x200106c0;
memcpy((void*)0x200106c0, "\x05\x01\x02\x00\x54\x00\x01\x00\xaf\xea\xb0\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x10\x01\x00\x02\x00\x00\x04\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x3c\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x36\x52\x59\x3d\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x08\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 192);
*(uint64_t*)0x200003e8 = 0xc0;
*(uint64_t*)0x200003f0 = 0xe400;
*(uint64_t*)0x200003f8 = 0x20010780;
memcpy((void*)0x20010780, "\x01\x01\x02\x00\xca\x00\x01\x00\x47\x62\x18\x00\x04\x00\x00\x00\x01\x00\x0a\x00\x00\x08\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x02\x00\x07\x00\x01\x00\xf4\xee\x1c\x00\x04\x00\x00\x00\x01\x00\x02\x06\x00\x04\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x08\x66\x69\x6c\x65\x30\x01\x01\x02\x00\xb4\x00\x01\x00\x09\x86\x1c\x00\x04\x00\x00\x00\x01\x00\x00\x06\x00\x04\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x08\x66\x69\x6c\x65\x31\x01\x01\x02\x00\x42\x00\x01\x00\x92\x8b\x1c\x00\x04\x00\x00\x00\x01\x00\x00\x06\x00\x04\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x08\x66\x69\x6c\x65\x32\x01\x01\x02\x00\x83\x00\x01\x00\xc6\x98\x1c\x00\x04\x00\x00\x00\x01\x00\x00\x06\x00\x04\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x08\x66\x69\x6c\x65\x33\x01\x01\x02\x00\x97\x00\x01\x00\x1b\x53\x20\x00\x04\x00\x00\x00\x01\x00\x00\x0a\x00\x04\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x08\x66\x69\x6c\x65\x2e\x63\x6f\x6c\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 288);
*(uint64_t*)0x20000400 = 0x120;
*(uint64_t*)0x20000408 = 0xec00;
*(uint64_t*)0x20000410 = 0x200108a0;
memcpy((void*)0x200108a0, "\x05\x01\x02\x00\x1e\x00\x01\x00\x80\x6f\x20\x01\x05\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x7c\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x01\x01\x02\x00\x42\x00\x01\x00\x66\xba\x18\x00\x05\x00\x00\x00\x01\x00\x0a\x00\x00\x04\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x02\x00\xd8\x00\x01\x00\xb7\xfb\x1c\x00\x05\x00\x00\x00\x01\x00\x00\x06\x00\x04\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x08\x66\x69\x6c\x65\x30\x01\x01\x02\x00\xaa\x00\x01\x00\xa9\xdb\x1c\x00\x05\x00\x00\x00\x01\x00\x00\x06\x00\x04\x00\x00\x09\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x08\x66\x69\x6c\x65\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 320);
*(uint64_t*)0x20000418 = 0x140;
*(uint64_t*)0x20000420 = 0xf000;
*(uint64_t*)0x20000428 = 0x200109e0;
memcpy((void*)0x200109e0, "\x05\x01\x02\x00\xda\x00\x01\x00\x9d\x7e\xb0\x00\x06\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x05\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x7c\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1a\x04\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x1a\x04\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 192);
*(uint64_t*)0x20000430 = 0xc0;
*(uint64_t*)0x20000438 = 0xf400;
*(uint64_t*)0x20000440 = 0x20010aa0;
memcpy((void*)0x20010aa0, "syzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkallersyzkal\000\000\000\000\000\000", 1056);
*(uint64_t*)0x20000448 = 0x420;
*(uint64_t*)0x20000450 = 0xf800;
*(uint64_t*)0x20000458 = 0x20010ec0;
memcpy((void*)0x20010ec0, "\x05\x01\x02\x00\x67\x00\x01\x00\xc4\xb6\xdb\x00\x09\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf7\x7e\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x3b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x00\x00\x00\x01\x00\x00\x00\x05\x04\x00\x00\x08\x74\x6d\x70\x05\x17\x00\x00\x08\x73\x79\x7a\x2d\x69\x6d\x61\x67\x65\x67\x65\x6e\x32\x33\x33\x38\x30\x37\x33\x39\x34\x32\x05\x06\x00\x00\x08\x66\x69\x6c\x65\x30\x05\x06\x00\x00\x08\x66\x69\x6c\x65\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 256);
*(uint64_t*)0x20000460 = 0x100;
*(uint64_t*)0x20000468 = 0x10000;
*(uint64_t*)0x20000470 = 0x20010fc0;
memcpy((void*)0x20010fc0, "\x05\x01\x02\x00\xe2\x00\x01\x00\x5f\xc6\xaa\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x05\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x7c\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x00\x00\x00\x00\x00\x00", 192);
*(uint64_t*)0x20000478 = 0xc0;
*(uint64_t*)0x20000480 = 0x10400;
*(uint64_t*)0x20000488 = 0x20011080;
memcpy((void*)0x20011080, "\x05\x01\x02\x00\x98\x00\x01\x00\xdf\xf5\xb0\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x05\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x7c\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x28\x23\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x00\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x28\x23\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 192);
*(uint64_t*)0x20000490 = 0xc0;
*(uint64_t*)0x20000498 = 0x10800;
*(uint64_t*)0x200004a0 = 0x20011140;
memcpy((void*)0x20011140, "\x05\x01\x02\x00\x83\x00\x01\x00\x88\xd8\x04\x01\x15\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x05\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x7c\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x00\x10\xe6\x07\x09\x0c\x0c\x00\x38\x61\x48\x32\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x4c\x69\x6e\x75\x78\x20\x55\x44\x46\x46\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x64\x00\x00\x00\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x79\x7a\x6b\x61\x6c\x6c\x65\x72\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 288);
*(uint64_t*)0x200004a8 = 0x120;
*(uint64_t*)0x200004b0 = 0x13000;
*(uint64_t*)0x200004b8 = 0x20011260;
memcpy((void*)0x20011260, "\x02\x00\x02\x00\x6f\x00\x01\x00\xba\x40\xf0\x01\x7f\x00\x00\x00\x00\x18\x00\x00\x27\x00\x00\x00\x00\x18\x00\x00\x27\x00\x00\x00", 32);
*(uint64_t*)0x200004c0 = 0x20;
*(uint64_t*)0x200004c8 = 0x1fc00;
*(uint8_t*)0x20011280 = 0;
syz_mount_image(0x20000000, 0x20000100, 0x20000, 0x1e, 0x20000200, 0, 0x20011280, 1);
syz_clone(0, 0x20000040, 0, 0, 0, 0);
	{
	int i;
	for(i = 0; i < 64; i++) {
syz_clone(0, 0x20000040, 0, 0, 0, 0);
		}
	}

}
int main(void)
{
		syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
	syscall(__NR_mmap, 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
	syscall(__NR_mmap, 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
			do_sandbox_none();
	return 0;
}
